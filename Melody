
/**
 *
 * @author KatieWalsh
 */
// TODO: write this class
import java.util.*;
import java.io.*;
import melody.audio.*;

public class Melody {

    private String artist;
    private String title;
    private Note[] melody;

    public Melody(File file) throws IOException {
        Scanner reader = new Scanner(file);
        title = reader.nextLine();
        artist = reader.nextLine();
        String numOfNotes = reader.nextLine();
        int size = Integer.parseInt(numOfNotes);
        melody = new Note[size];
        String line = "";
        int m = 0;
        while (reader.hasNextLine()) {
            line = reader.nextLine();
            int space1 = line.indexOf(" ");
            String endOfLine = line.substring(space1 + 5);
            int space2 = endOfLine.indexOf(" ");
            double duration = 0.0;
            String pitch = "";
            int octave = 0;
            String accidental = "";
            boolean repeat = false;
            for (int i = 4; i < size + 1; i++) {
                duration = Double.parseDouble(line.substring(0, space1));
                pitch = line.substring(space1, space1 + 2);
                octave = Integer.parseInt(line.substring(space1 + 3, space1 + 4));
                accidental = line.substring(space1 + 5, space2);
                repeat = Boolean.parseBoolean(endOfLine.substring(space2));

                Accidental a = null;
                if (accidental.equals("SHARP")) {
                    a = Accidental.SHARP;
                } else if (accidental.equals("NATURAL")) {
                    a = Accidental.NATURAL;
                } else if (accidental.equals("FLAT")) {
                    a = Accidental.FLAT;
                }

                String[] pitches = new String[]{"A", "B", "C", "D", "E", "F", "G"};
                Pitch[] notePitches = new Pitch[]{Pitch.A, Pitch.B, Pitch.C, Pitch.D, Pitch.E, Pitch.F, Pitch.G};
                Pitch notePitch = null;
                for (int j = 0; j < 7; j++) {
                    if (pitches[j].equals(pitch)) {
                        notePitch = notePitches[j];
                    }

                }
                Note n = new Note(duration, notePitch, octave, a, repeat);
            }
        }
    }

    public void changeTempo(double ratio) {
        for (int i = 0; i < melody.length; i++){
            melody[i].setDuration(melody[i].getDuration() * ratio);
        }
    }

    public String getArtist() {
        return artist;
    }

    public String getTitle() {
        return title;
    }

    public double getTotalDuration() {
        double total = 0;
        for (int i = 0; i < melody.length; i++) {
            if (melody[i].isRepeat() == false) {
                total += melody[i].getDuration();
            } else {
                int num = i;
                double time = melody[i].getDuration();
                boolean end = false;
                while (end == false) {
                    for (int j = i+1; j < melody.length; j++) {
                        num++;
                        if (melody[j].isRepeat() == false) {
                            time += melody[j].getDuration();
                        } else {
                            time += melody[j].getDuration();
                            end = true;
                           
                        }
                    }
                }
                total += time;
              i=num;
            }
        }
        return total;
    }

    public boolean octaveDown() {
        for (int i = 0; i < melody.length; i++) {
           if(melody[i].getOctave()==1){
              return false;
            }
        }
        for (int i = 0; i < melody.length; i++) {
        melody[i].setOctave(melody[i].getOctave()-1);
            } 
        return true;
        }
       
    

    public boolean octaveUp() {
    for (int i = 0; i < melody.length; i++) {
           if(melody[i].getOctave()==10){
              return false;
            }
        }
        for (int i = 0; i < melody.length; i++) {
        melody[i].setOctave(melody[i].getOctave()+1);
            } 
        return true;
        }
    
    public void play() {
        ArrayList<Note> rNotes = new ArrayList<>();
        ArrayList<Note> newMelody = new ArrayList<>();
        for(int i = 0; i < melody.length; i++){
            if(melody[i].isRepeat()){
                rNotes.add(melody[i]);
                newMelody.add(melody[i]);
                for (int j = i+1; j<melody.length; j++){
                    rNotes.add(melody[j]);
                    newMelody.add(melody[j]);
                    if(melody[j].isRepeat()){
                        for(int s = 0; s < rNotes.size(); s++){
                            newMelody.add(rNotes.get(s));
                            i = j+1;
                        }
                        break;
                    }
                }
            }
            newMelody.add(melody[i]);
        }
        for(int k = 0; k < melody.length; k++){
            newMelody.get(k).play();
        }
    }

    public void reverse() {
       Note[] tempArr = new Note[melody.length];
       int j = 0;
       for (int i = melody.length; i > 0; i--){
           tempArr[j] = melody[i];
           j++;
       }
       for (int i = 0; i < melody.length; i++){
           melody[i] = tempArr[i];
       }
    }
    
    public void mergeMelody(Melody melody2){
        ArrayList<Note> newMelody = new ArrayList<>();
        for(int j = 0; j < melody.length; j++){
            newMelody.add(melody[j]);
        }
        for(int i = 0; i < melody2.melody.length; i++){
            newMelody.add(melody2.melody[i]);
        }
        melody = new Note[newMelody.size()];
        for(int s = 0; s<melody.length; s ++){
            melody[s] = newMelody.get(s);
        }
    }


    public String toString() {
// TODO: write this method
        return "";
    }
}
